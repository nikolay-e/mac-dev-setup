#!/bin/bash
# shellcheck shell=bash
# --------------------------------------------------------------------
## Modern CLI Replacements & Aliases
# --------------------------------------------------------------------
# Use modern alternatives for core commands
alias cat='bat --paging=never' # View file contents with syntax highlighting
alias find='fd' # Fast file search by name or pattern
alias grep='rg' # Fast text search within files

# Aliases for eza (the modern replacement for ls)
alias ls='eza'                 # List directory contents
alias l='eza'                # List files (names only, no extra details)
alias ll='eza -l'              # List files in long format (same as l)
alias la='eza -la'             # List all files including hidden ones
alias lt='eza -T --level=2'    # Show directory tree (2 levels deep)
alias l.='eza -la | grep "^\."' # List only hidden dotfiles

# --------------------------------------------------------------------
## Navigation & Zsh
# --------------------------------------------------------------------
alias ..='cd ..' # Go up one directory
alias ...='cd ../..' # Go up two directories
alias ....='cd ../../..' # Go up three directories
alias icloud='cd ~/Library/Mobile\ Documents/com~apple~CloudDocs' # Navigate to iCloud Drive
alias code='cd ~/code' # Navigate to code directory
alias zshconfig='nvim ~/.zshrc' # Edit zsh configuration file
alias zshsource='source ~/.zshrc' # Reload zsh configuration
alias zshrc='nvim ~/.zshrc && source ~/.zshrc'  # Edit and reload zsh config
alias hosts='sudo nvim /etc/hosts' # Edit system hosts file

# --------------------------------------------------------------------
## Tree & Clipboard
# --------------------------------------------------------------------
alias tree='tree -C' # Display directory structure with colors
alias treex='tree -C -I "node_modules|*.pyc|__pycache__"' # Tree excluding common dev files
alias c='clear' # Clear terminal screen
alias p='pbpaste' # Paste from clipboard
alias copypwd='pwd | pbcopy' # Copy current directory path to clipboard

# --------------------------------------------------------------------
## Neovim (nvim)
# --------------------------------------------------------------------
alias v='nvim' # Open Neovim editor
alias vi='nvim' # Open Neovim (vi shortcut)
alias vim='nvim' # Open Neovim (vim shortcut)
alias oldvim='/usr/bin/vim'  # Open original system Vim

# --------------------------------------------------------------------
## Git
# --------------------------------------------------------------------
alias g='git' # Git command shortcut
alias gs='git status -s' # Show short git status
alias gss='git status' # Show full git status
alias ga='git add' # Stage files for commit
alias gaa='git add --all' # Stage all changes
alias gc='git commit -m' # Commit with message
alias gca='git commit --amend --no-edit' # Amend last commit without editing message
alias gb='git branch' # List or create branches
alias gco='git checkout' # Switch branches or restore files
alias gcb='git checkout -b' # Create and switch to new branch
alias gp='git push' # Push commits to remote
alias gpf='git push --force-with-lease' # Force push safely
alias gl='git pull' # Pull changes from remote
alias glog='git log --oneline --decorate --graph --all' # Show pretty git log graph
alias gd='git diff' # Show unstaged changes
alias gdc='git diff --cached' # Show staged changes
alias lg='lazygit'    # Open LazyGit terminal UI

# Enhanced Git workflows  
alias gstat='git status --verbose' # Show detailed git status with diffs
alias gwip='git add -A && git commit -m "WIP" --no-verify' # Quick work-in-progress commit
alias gunwip='git log -n 1 | grep -q -c "WIP" && git reset HEAD~1' # Undo last WIP commit
alias gundo='git reset --soft HEAD~1' # Undo last commit keeping changes staged
alias gundo-hard='git reset --hard HEAD~1'  # Undo last commit discarding all changes

# Destructive operations with safety prompts
gpristine() {
  echo "  DANGER: This will DELETE all uncommitted changes and untracked files!"
  echo "Press Ctrl+C to cancel, or Enter to continue..."
  read -r
  git reset --hard && git clean -dffx
}
alias gbclean='git branch --merged | grep -v "\\*\\|main\\|master" | xargs -n 1 git branch -d' # Delete merged branches

# Advanced Git operations
alias glg='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit' # Beautiful colored git log
alias gsync='git fetch origin && git rebase origin/$(git rev-parse --abbrev-ref HEAD)' # Sync current branch with origin
alias gfix='git commit --fixup' # Create fixup commit for later squashing
alias gsquash='git rebase -i --autosquash' # Interactive rebase with autosquash
alias gstash='git stash push -m' # Stash changes with message
alias gpop='git stash pop' # Apply and remove latest stash

# GitHub CLI shortcuts
alias prc='gh pr create --fill' # Create GitHub pull request
alias prv='gh pr view' # View current pull request
alias prs='gh pr status' # Show PR status 
alias prchecks='gh pr checks' # Show PR CI check status
alias prco='gh pr checkout' # Checkout a pull request locally

# --------------------------------------------------------------------
## Kubernetes (Enhanced with ahmetb-style aliases)
# --------------------------------------------------------------------
alias k='kubectl' # Kubernetes CLI shortcut

# Get commands (inspired by ahmetb/kubectl-aliases)
alias kgp='kubectl get pods' # List all pods
alias kgpo='kubectl get pods -o wide' # List pods with node info
alias kgpw='kubectl get pods --watch' # Watch pod changes live
alias kgs='kubectl get services' # List all services
alias kgso='kubectl get services -o wide' # List services with details
alias kgd='kubectl get deployments' # List all deployments
alias kgdo='kubectl get deployments -o wide' # List deployments with details
alias kgn='kubectl get nodes' # List cluster nodes
alias kgno='kubectl get nodes -o wide' # List nodes with details
alias kgns='kubectl get namespaces' # List all namespaces
alias kgcm='kubectl get configmaps' # List all configmaps
alias kgsec='kubectl get secrets' # List all secrets
alias kgall='kubectl get all' # List all resources

# Describe commands
alias kdp='kubectl describe pod'
alias kds='kubectl describe service'
alias kdd='kubectl describe deployment'
alias kdn='kubectl describe node'

# Logs and exec
alias klogs='kubectl logs'
alias klogf='kubectl logs -f'
alias klogt='kubectl logs --tail=100'
alias klogft='kubectl logs -f --tail=100'
alias kexec='kubectl exec -it'

# Apply and delete
alias kapp='kubectl apply -f'
alias kdel='kubectl delete'
alias kdelp='kubectl delete pod'
alias kdels='kubectl delete service'
alias kdeld='kubectl delete deployment'

# Port forwarding and proxy
alias kpf='kubectl port-forward'    # Usage: kpf svc/myapp 8080:80
alias kproxy='kubectl proxy'

# Context and namespace management  
alias kctx='kubectx'               # Switch contexts
alias kns='kubens'                 # Switch namespaces
alias kgc='kubectl config get-contexts'
alias kcc='kubectl config current-context'

# Advanced tools
alias kstern='stern'               # Multi-pod log tailing
alias k9='k9s'                     # Kubernetes cluster TUI

# Quick utilities
kdebug() {
  kubectl run "debug-$(date +%s)" --rm -i --tty --image=nicolaka/netshoot -- sh
}

kdebug-simple() {
  kubectl run "debug-$(date +%s)" --rm -i --tty --image=busybox -- sh  
}

kclean() {
  kubectl get pods --field-selector=status.phase=Succeeded -o name | xargs -r kubectl delete
}

# Advanced debugging with kubectl plugins (requires krew)
ktree() {
  kubectl tree "${1:-deployment}" "${2}"
}

kneat() {
  kubectl neat get "${1}" "${2}" -o yaml
}

kaccess() {
  kubectl access-matrix --sa "${1:-default}"
}

# Resource analysis
ktop-cpu() {
  kubectl top pod --all-namespaces --sort-by=cpu
}

ktop-mem() {
  kubectl top pod --all-namespaces --sort-by=memory
}

# --------------------------------------------------------------------
## Terraform & Infrastructure as Code
# --------------------------------------------------------------------
alias tf='terraform'
alias tfi='terraform init'
alias tfp='terraform plan'
alias tfa='terraform apply'
alias tfd='terraform destroy'
alias tfv='terraform validate'
alias tff='terraform fmt -recursive'
alias tfs='terraform show'
alias tfr='terraform refresh'
alias tfo='terraform output'
alias tfws='terraform workspace'

# Modern Terraform workflow functions (using tenv for version management)
tfapply() {
  terraform plan -out=tfplan && terraform apply tfplan
}

tfplan() {
  terraform plan -out=tfplan "$@"
}

tfdestroy-safe() {
  terraform plan -destroy -out=destroy.plan && \
  read -p "Execute destroy plan? (y/N) " -n 1 -r && \
  echo && \
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    terraform apply "destroy.plan"
  fi
}

# Enhanced Terraform workflows
tfwswitch() {
  terraform workspace select "$1" && terraform plan -var-file="workspaces/$1.tfvars"
}

tfsec() {
  trivy config . --severity HIGH,CRITICAL
}

tfcost() {
  infracost breakdown --path . --format table
}

tfdocs() {
  terraform-docs markdown table . > README.md
  echo "Documentation generated in README.md"
}

# Version management with tenv (replaces tfenv)
alias tfuse='tenv use terraform'
alias tflist='tenv list terraform'
alias tfinstall='tenv install terraform'

# --------------------------------------------------------------------
## Python
# --------------------------------------------------------------------
# Pyenv is used to manage Python versions.
# The 'python' and 'pip' commands will automatically point to the
# version set by `pyenv global` or `pyenv local`.
# No aliases are needed.

# --------------------------------------------------------------------
## Productivity
# --------------------------------------------------------------------
# Quick navigation with zoxide (after it's installed, use 'z' to jump to directories)
alias zz='z -'              # Go back to previous directory
alias zi='zi'               # Interactive directory selection

# Quick file operations
alias mkd='mkdir -p'        # Create directory with parents
alias duh='du -h -d 1 | sort -h'  # Human-readable directory sizes

# Safe file operations (with confirmation prompts)
alias rm='rm -i'            # Prompt before removal
alias cp='cp -i'            # Prompt before overwrite  
alias mv='mv -i'            # Prompt before overwrite
alias cls='clear'           # Windows-style clear

# Process management
alias psg='ps aux | grep -v grep | grep -i'  # Search processes
killport() {
  if [ -z "$1" ]; then
    echo "Usage: killport <port_number>"
    return 1
  fi
  lsof -ti:"$1" | xargs kill -9
}

# --------------------------------------------------------------------
## Utilities
# --------------------------------------------------------------------
alias myip='curl ifconfig.me' # Show public IP address
alias localip='ipconfig getifaddr en0' # Show local network IP
alias serve='python3 -m http.server' # Start HTTP server in current directory
alias flushdns='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder' # Clear DNS cache
alias zj='zellij' # Launch Zellij terminal multiplexer
alias help='tldr'           # Show command examples with tldr
alias weather='curl wttr.in'  # Quick weather check

# Modern shell automation with jc (CLI to JSON conversion)
alias psj='ps aux | jc --ps'               # Process list as JSON
alias lsj='ls -la | jc --ls'               # File listing as JSON  
alias dfj='df -h | jc --df'                # Disk usage as JSON
alias digj='dig +short | jc --dig'         # DNS lookup as JSON

# Git hooks and quality gates
alias precommit='pre-commit run --all-files'  # Run all pre-commit hooks

# --------------------------------------------------------------------
## Data Streaming & Kafka
# --------------------------------------------------------------------
# kcat (Kafka CLI) - requires KAFKA_BROKERS environment variable
# Usage: export KAFKA_BROKERS="broker1:9092,broker2:9092"

# Safe Kafka aliases with environment checks
kcatp() {
  if [[ -z "$KAFKA_BROKERS" ]]; then
    echo " Error: Set KAFKA_BROKERS environment variable first"
    echo "Example: export KAFKA_BROKERS='localhost:9092'"
    return 1
  fi
  kcat -P -b "$KAFKA_BROKERS" -t "$@"
}

kcatc() {
  if [[ -z "$KAFKA_BROKERS" ]]; then
    echo " Error: Set KAFKA_BROKERS environment variable first"
    echo "Example: export KAFKA_BROKERS='localhost:9092'"
    return 1
  fi
  kcat -C -b "$KAFKA_BROKERS" -t "$@"
}

kcatl() {
  if [[ -z "$KAFKA_BROKERS" ]]; then
    echo " Error: Set KAFKA_BROKERS environment variable first"
    echo "Example: export KAFKA_BROKERS='localhost:9092'"
    return 1
  fi
  kcat -L -b "$KAFKA_BROKERS" "$@"
}

# Kafka topic helpers
kcat-tail() {
  if [ -z "$1" ]; then
    echo "Usage: kcat-tail <topic> [partition]"
    return 1
  fi
  kcat -C -b "$KAFKA_BROKERS" -t "$1" -o -10 "$@"
}

kcat-produce-json() {
  if [ -z "$1" ]; then
    echo "Usage: kcat-produce-json <topic>"
    echo "Then input JSON messages (Ctrl+D to end)"
    return 1
  fi
  kcat -P -b "$KAFKA_BROKERS" -t "$1" -T
}